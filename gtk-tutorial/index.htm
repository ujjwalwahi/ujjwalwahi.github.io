<!DOCTYPE HTML>
<html>
<head>
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta name="description" content="">
		<meta name="author" content="">
		<link rel="icon" href="../../favicon.ico">    
		<title>Installing GTK and running your first C based GUI application in Windows</title>	
		<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
		<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">

		<script src="assets/pretify/run_prettify.js"></script>
		<style type="text/css">
		body {			
			padding-bottom: 30px;
		}

		.theme-dropdown .dropdown-menu {
			position: static;
			display: block;
			margin-bottom: 20px;
		}

		.theme-showcase > p > .btn {
			margin: 5px 0;
		}

		.theme-showcase .navbar .container {
			width: auto;
		}

		.page {
			display: none;
		}
		li {
			margin: 10px 0;
		}
		</style>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
		<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
	</head>
	<body>	
		<div class="navbar" role="navigation">
			<div class="container">
				<div class="navbar-header">
					<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
					<a class="navbar-brand" href="index.htm" style="font-size:40px;margin-top:10px;">GUI in C</a>
				</div>
				<div class="navbar-collapse collapse">
					<ul class="nav navbar-nav">
						<li class="active"><a href="index.htm">Home</a></li>
						<li><a href="contact.htm">Contact</a></li>						
					</ul>
				</div><!--/.nav-collapse -->
			</div>
		</div>
		<div class="container theme-showcase" role="main">

			<div class="jumbotron">
				<h1>Tutorial - GUI app with C + GTK</h1>	
				<p>Come out of the world of console. Create GUI application in C with the help of GTK</p>			
			</div>

			<div id="step-0" class="page">
				<div class="page-header">
					<h1>Brief Introduction</h1>						
				</div>

				<div class="well">
					<p>
						Official website describe GTK+ project as - GTK+, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces. Offering a complete set of widgets, GTK+ is suitable for projects ranging from small one-off tools to complete application suites.
						<br/>
						You can learn more about GTK+ from <a href="http://www.gtk.org/">here</a>
						<br>
						<br>
						Although GTK can be used with multiple programming languages, we will be using GTK for developing GUI application in C
						<br>
						<br>
						One major feature of GTK is that it is cross-platform i.e. once you have created your GUI application in one platform(Windows, Linux, MacOS), you can run your application on other platform.
						<br>
						<br>
						Before we start, you will need to install a <code>c</code> complier on your windows machine. We will be using <code>gcc</code> complier here. Alternatively, you can use Microsoft C/C++ complier (this tutorial covers only <code>gcc</code>). If you already have <code>gcc</code> installed, you can start from Step-2
					</p>
				</div>

				<div style="text-align:center;margin:10px 0">
					<button onclick="goTo(1);" type="button" class="btn btn-primary">Step 1</button>
				</div>
			</div>

			<div id="step-1" class="page">
				<div class="page-header">
					<h1>Step 1 - Installing <code>gcc</code> compiler on Windows</h1>
				</div>

				<div class="well">
					<p>
						<ul>
							<li>Installation of <code>gcc</code> on windows is done via <a href="http://www.mingw.org">MinGW</a>. An automated GUI installer assistant called <a href="https://sourceforge.net/projects/mingw/files/latest/download">mingw-get-setup.exe</a> is available.</li>
							<li>
								Run the downloaded file to install MinGW installer assistant. Installation looks something like this
								<div style="padding:10px;background-color:black; text-align:center;width:620px;margin:10px 0">
									<img src="assets/images/step-1-mingw-setup.png"/>
								</div>
							</li>
							<li>
								In following steps I will assume that you have choosen <code>C:\MinGW</code> as installation directory
							</li>
							<li>
								After installation run file <code>C:\MinGW\bin\mingw-get.exe</code> and perform following steps
								<ol>
									<li>From menu on left side click on <i>Basic Setup</i>
									</li>
									<li>Select checkbox <i>mingw32-base</i> and </li>
									<li>Then select <i>Installation -> Apply Changes</i></li>
								</ol>
								<div style="padding:10px;background-color:black; text-align:center;width:460px;margin:10px 0">
									<img src="assets/images/step-1-mingw-base.png"/>
								</div>
							</li>
							<li>
								After installation update your <i>PATH</i> Envioronment Variable so that you can directly use <code>gcc</code> in your command prompt, else you have to type <code>C:\MinGW\bin\gcc.exe</code> every time you want to compile your code
								<ol>
									<li>Right click <i>Computer</i> and select <i>Properties</i></li>
									<li>From the menu on left, click on <i>Advance system settings</i></li>
									<li>This will open a small window titled <i>System Properties</i></li>
									<li>
										Click on <i>Environment Variables</i> available under <i>Advanced</i> tab
									</li>
									<li>Now under <i>System Variables</i> section find <i>Variable</i> called <i>PATH</i>. Click on that and then click <i>Edit</i></li>
									<li>In second <i>textbox</i> append <code>;C:\MinGW\bin\</code> </li>
									<li>Click <i>OK</i> and come out of all windows</li>
								</ol>
							</li>
							<li>To check that your <i>PATH</i> is updated succesfully, open <code>cmd</code> and type <code>gcc</code> then <i>Enter</i>. If something like <i>gcc: fatal error: no input file</i> displayed at screen then congratulations your <code>gcc</code> installation is complete</li>
							<li>But if you get something like <i>'gcc' is not recognised as an internal or external command</i> than sorry either you have missed something from above steps or your machine is behaving differently. Get the help of some local expert or try <b>Google</b></li>
						</ul>
					</p>
				</div>
				<div style="text-align:center;margin:10px 0">
					<button onclick="goTo(2);" type="button" class="btn btn-primary">Step 2</button>
				</div>

			</div>

			<div id="step-2" class="page">

				<div class="page-header">
					<h1>Step 2 - Downloading and Installing GTK+</h1>
				</div>

				<div class="well">
					<p>
						<ul>
							<li>Download GTK all-in-one-bundle from here <a href="http://win32builder.gnome.org/gtk+-bundle_3.6.4-20130921_win32.zip">here</a>. This is version 3.x, if you wish to download some other version checkout <a href="http://www.gtk.org/download/win32.php">here</a></li>
							<li>Now goto directory where you had installed MinGW, I assume that path is <code>C:\MinGW</code>. Create a new folder <i>gtk</i>. Extract downloaded zip file in this directory<br/>
								<i>Note: You can extract downloaded gtk's zip file at any location in your system. But it is good to have all logically related files at same place</i></li>
								<li>Add <code>C:\MinGW\gtk\bin\</code> to your <i>Systems's PATH Variable. I have discussed how to update <i>PATH variable</i> in last points of Step 1. <a href="index.htm?step=1">Click here</a> to refer </li>	
								<li>You also need  create a new System Variable <i>C_INCLUDE_PATH</i> and set its value to <i>C:\MinGW\gtk\include</i>. Go to same window where you had updated PATH variable, this time instead of selecting variable and clicking on <i>Edit</i>, click on <i>New</i> </li>	
								<li>Now create a folder <i>gtk-gcc</i> in <i>C:\</i> and then run following command in command prompt<br/>
									<code>cd C:\gtk-gcc</code>
								</li>							
								<li>After completing all mentioned steps run following commands in command prompt<br/>
									<code>pkg-config --cflags --libs gtk+-3.0 > gtk-parameters.txt</code>
								</li>	
								<li>After this create a file <i>gtk-gcc.bat</i>. Content of this file will be<br/>
									<i>gcc -Wall -g %1 -o %2 &lt;copy content of gtk-parameters.txt file here &gt;</i>
								</li>
								<li>Your gtk-gcc.bat will look something like this<br><br>
									<samp>
										gcc -Wall -g %1 -o %2 -mms-bitfields -ID:/development/libraries/c/gtk/include/gtk-3.0 -ID:/development/libraries/c/gtk/include/cairo -ID:/development/libraries/c/gtk/include/pango-1.0 -ID:/development/libraries/c/gtk/include/atk-1.0 -ID:/development/libraries/c/gtk/include/cairo -ID:/development/libraries/c/gtk/include/pixman-1 -ID:/development/libraries/c/gtk/include -ID:/development/libraries/c/gtk/include/freetype2 -ID:/development/libraries/c/gtk/include -ID:/development/libraries/c/gtk/include/libpng15 -ID:/development/libraries/c/gtk/include/gdk-pixbuf-2.0 -ID:/development/libraries/c/gtk/include/libpng15 -ID:/development/libraries/c/gtk/include/glib-2.0 -ID:/development/libraries/c/gtk/lib/glib-2.0/include -LD:/development/libraries/c/gtk/lib -lgtk-3 -lgdk-3 -lgdi32 -limm32 -lshell32 -lole32 -Wl,-luuid -lpangocairo-1.0 -lpangoft2-1.0 -lfreetype -lfontconfig -lpangowin32-1.0 -lgdi32 -lpango-1.0 -lm -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lintl
									</samp>
								</li>	
								<li>Copy <code>gtk-gcc.bat</code> file to <code>C:\MinGW\gtk\bin\</code></li>
							</ul>

						</div>

						<div style="text-align:center;margin:10px 0">
							<button onclick="goTo(3);" type="button" class="btn btn-primary">Step 3</button>
						</div>

					</div>

					<div id="step-3" class="page">

						<div class="page-header">
							<h1>Step 3 - Creating and running 'Hello World' gui app</h1>
						</div>

						<div class="well">
							<p>
								<ul>
									<li>Create a file <code>demo.c</code><br/><br/>
										<pre class="prettyprint">
#include &lt;gtk/gtk.h&gt;
int main( int   argc, char *argv[] )
{
	GtkWidget *window;

	gtk_init (&argc, &argv);

	window = gtk_window_new (GTK_WINDOW_TOPLEVEL);

	gtk_widget_show  (window);

	gtk_main ();

	return 0;
}
									</pre>
									<p>
										Compile and run this file <br/>
										<code>&gt; gtk-gcc.bat demo.c demo.exe</code><br/>
										<code>&gt; demo.exe</code>
									</p>
								</li>
								<li>
									This will open a small black window.
								</li>
								<li>
									Now we move to Hello World program. Create a file hello.c<br/><br/>
									<pre class="prettyprint">
#include &lt;gtk/gtk.h&gt;									
/* This is a callback function. The data arguments are ignored
 * in this example. More on callbacks below. */
static void hello( GtkWidget *widget,
                   gpointer   data )
{
    g_print ("Hello World\n");
}

static gboolean delete_event( GtkWidget *widget,
                              GdkEvent  *event,
                              gpointer   data )
{
    /* If you return FALSE in the "delete-event" signal handler,
     * GTK will emit the "destroy" signal. Returning TRUE means
     * you don't want the window to be destroyed.
     * This is useful for popping up 'are you sure you want to quit?'
     * type dialogs. */

    g_print ("delete event occurred\n");

    /* Change TRUE to FALSE and the main window will be destroyed with
     * a "delete-event". */

    return TRUE;
}

/* Another callback */
static void destroy( GtkWidget *widget,
                     gpointer   data )
{
    gtk_main_quit ();
}

int main( int   argc,
          char *argv[] )
{
    /* GtkWidget is the storage type for widgets */
    GtkWidget *window;
    GtkWidget *button;
    
    /* This is called in all GTK applications. Arguments are parsed
     * from the command line and are returned to the application. */
    gtk_init (&argc, &argv);
    
    /* create a new window */
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    
    /* When the window is given the "delete-event" signal (this is given
     * by the window manager, usually by the "close" option, or on the
     * titlebar), we ask it to call the delete_event () function
     * as defined above. The data passed to the callback
     * function is NULL and is ignored in the callback function. */
    g_signal_connect (window, "delete-event",
		      G_CALLBACK (delete_event), NULL);
    
    /* Here we connect the "destroy" event to a signal handler.  
     * This event occurs when we call gtk_widget_destroy() on the window,
     * or if we return FALSE in the "delete-event" callback. */
    g_signal_connect (window, "destroy",
		      G_CALLBACK (destroy), NULL);
    
    /* Sets the border width of the window. */
    gtk_container_set_border_width (GTK_CONTAINER (window), 10);
    
    /* Creates a new button with the label "Hello World". */
    button = gtk_button_new_with_label ("Hello World");
    
    /* When the button receives the "clicked" signal, it will call the
     * function hello() passing it NULL as its argument.  The hello()
     * function is defined above. */
    g_signal_connect (button, "clicked",
		      G_CALLBACK (hello), NULL);
    
    /* This will cause the window to be destroyed by calling
     * gtk_widget_destroy(window) when "clicked".  Again, the destroy
     * signal could come from here, or the window manager. */
    g_signal_connect_swapped (button, "clicked",
			      G_CALLBACK (gtk_widget_destroy),
                              window);
    
    /* This packs the button into the window (a gtk container). */
    gtk_container_add (GTK_CONTAINER (window), button);
    
    /* The final step is to display this newly created widget. */
    gtk_widget_show (button);
    
    /* and the window */
    gtk_widget_show (window);
    
    /* All GTK applications must have a gtk_main(). Control ends here
     * and waits for an event to occur (like a key press or
     * mouse event). */
    gtk_main ();
    
    return 0;
}
					</pre>
					<p>
						Compile and run this file <br/>
						<code>&gt; gtk-gcc.bat demo.c demo.exe</code><br/>
						<code>&gt; demo.exe</code>
					</p>
				</li>

			</ul>
		</p>
	</div>
	<div style="text-align:center;margin:10px 0">
		<button onclick="goTo(0);" type="button" class="btn btn-primary">Start Over</button>
	</div>

</div>
<script type="text/javascript">
function goTo(step) {
	$(".page").hide();
	$("#step-" + step).show();
	window.location.href = "index.htm#step-" + step;
}
$(document).ready(function() {
	if(window.location.hash) {
		var step = window.location.hash.split("-")[1];
		$("#step-" + step).show();
	} else {
		$("#step-0").show();
	}
});
</script>
</body>
</html>